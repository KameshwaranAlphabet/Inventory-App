@model List<Inventree_App.Models.CartItem>
@{
    Layout = "_FacultyLayout";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f4f4f4;
            padding: 19px;
        }


        .container-cart {
/*             max-width: 800px;
 */            margin-top: 50px;
           /*  background: white; */
            padding: 20px;
            border-radius: 10px;
         /*    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.5s ease-in-out; */
        }

        @@keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

      /*   .table {
            animation: slideIn 0.5s ease-in-out;
        } */
/* 
        @@keyframes slideIn {
            from

        {
            opacity: 0;
            transform: translateX(-20px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
 */
        }

        .btn {
            transition: all 0.3s ease;
        }

            .btn:hover {
                transform: scale(1.05);
            }

        .quantity-container {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .quantity-btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            font-size: 16px;
            border-radius: 5px;
            margin: 0 5px;
        }

            .quantity-btn:hover {
                background: #0056b3;
            }

        .loader {
            display: none;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: auto;
        }

        @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }
    </style>
</head>
<body>

    <div class="container-cart">
        <h2 class="text-center mb-4">Your Cart</h2>

        @if (Model == null || !Model.Any())
        {
            <p class="text-center">Your cart is empty.</p>
        }
        else
        {
            <table class="table table-striped text-center">
                <thead class="table-dark">
                    <tr>
                        <th>Stock Name</th>
                        <th>Quantity</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.StockName</td>
                            <td class="quantity-container">
                                <button class="quantity-btn" onclick="updateQuantity('@item.StockId', -1)">-</button>
                                <span id="qty-@item.StockId">@item.Quantity</span>
                                <button class="quantity-btn" onclick="updateQuantity('@item.StockId', 1)">+</button>
                            </td>
                            <td>
                                <button class="btn btn-danger btn-sm" onclick="removeFromCart(@item.StockId)">
                                    Remove
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="text-center">
                <button class="btn btn-success mt-3 px-4" onclick="placeOrder()">Place Order</button>
            </div>
        }

        <div class="loader" id="loader"></div>
    </div>

    <script>
        function updateQuantity(stockId, change) {
            let qtyElement = document.getElementById(`qty-${stockId}`);
            let currentQty = parseInt(qtyElement.innerText);
            let newQty = currentQty + change;

            if (newQty < 1) {
                Swal.fire("Invalid!", "Quantity cannot be less than 1.", "warning");
                return;
            }
            fetch("/Order/AddToCart", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ stockId: stockId, quantity: parseInt(newQty) })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    qtyElement.innerText = newQty;
                } else {
                    Swal.fire("Error!", data.message || "Could not update quantity.", "error");
                }
            });
        }

        function removeFromCart(stockId) {
            Swal.fire({
                title: "Are you sure?",
                text: "This item will be removed from your cart!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, remove it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/Order/RemoveFromCart', {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ stockId: stockId })
                    })
                    .then(response => response.json())
                    .then(data => {
                        Swal.fire("Removed!", data.message || "Item removed.", "success")
                            .then(() => location.reload());
                    });
                }
            });
        }

        function placeOrder() {
            Swal.fire({
                title: "Processing...",
                text: "Placing your order...",
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                    fetch('/Order/PlaceOrder', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    })
                    .then(response => response.json())
                    .then(data => {
                        Swal.fire("Success!", data.message || "Order placed successfully.", "success")
                            .then(() => location.reload());
                    });
                }
            });
        }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
