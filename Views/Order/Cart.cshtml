@* @using Inventree_App.Dto
@model List<CartItemDto>
@{
    Layout = "_FacultyLayout";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>aLphabet-Connect</title>
    <link rel="icon" type="image/x-icon" href="/Images/favicon.png">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            /* font-family: Arial, sans-serif; */
            background: #f8f9fa;
            padding: 19px;
        }

        .container-cart {
            margin-top: 30px;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        }

        .cart-item {
            display: flex;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #ddd;
        }

            .cart-item img {
                width: 80px;
                height: 80px;
                object-fit: cover;
                border-radius: 10px;
                margin-right: 15px;
            }

        .quantity-container {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .quantity-btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            font-size: 16px;
            border-radius: 5px;
            margin: 0 5px;
        }

            .quantity-btn:hover {
                background: #0056b3;
            }

        .cart-summary {
            margin-top: 20px;
            text-align: right;
        }

            .cart-summary h4 {
                font-weight: bold;
            }

        .total-price {
            font-size: 20px;
            font-weight: bold;
            color: #6c63ff;
        }
        @@media (max-width: 768px) {
            .cart-item

        {
            flex-direction: column;
            text-align: center;
        }

        .cart-item img {
            margin-bottom: 10px;
        }

        }
    </style>
</head>
<body>
    <div class="container container-cart">
        <h2 class="text-center mb-4">Shopping Cart</h2>

        @if (Model == null || !Model.Any())
        {
            <p class="text-center">Your cart is empty.</p>
        }
        else
        {
            <div class="table-responsive">
                <table class="table text-center">
                    <thead class="table-light">
                        <tr>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Unit Quantity</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr class="align-middle">
                                <td class="text-center">
                                    <strong>@item.StockName</strong>
                                </td>
                                <td class="text-center">
                                    <div class="d-flex justify-content-center align-items-center">
                                        <button class="quantity-btn btn-sm" onclick="updateQuantity('@item.StockId', -1)">-</button>
                                        <span id="qty-@item.StockId" class="mx-2">@item.Quantity</span>
                                        <button class="quantity-btn btn-sm" onclick="updateQuantity('@item.StockId', 1)">+</button>
                                    </div>
                                </td>
                                <td class="text-center">
                                    <strong>@item.Units</strong>
                                </td>
                                <td class="text-center">
                                    <button class="btn btn-danger btn-sm" onclick="removeFromCart(@item.StockId)">Remove</button>
                                </td>
                            </tr>
                        }
                    </tbody>

                </table>
            </div>

            <div class="cart-summary">
                <button class="btn btn-success px-4" onclick="placeOrder()">Place Order</button>
            </div>
        }
    </div>

    <script>
        function updateQuantity(stockId, change) {
            let qtyElement = document.getElementById(`qty-${stockId}`);
            let totalElement = document.getElementById(`total-${stockId}`);
            let currentQty = parseInt(qtyElement.innerText);
            let newQty = currentQty + change;

            if (newQty < 1) {
                alert("Invalid! Quantity cannot be less than 1.");
                return;
            }
            fetch("/Order/AddToCart", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ stockId: stockId, quantity: newQty })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    qtyElement.innerText = newQty;
                    let price = parseFloat(totalElement.innerText.replace("$", "")) / currentQty;
                    totalElement.innerText = `$${(price * newQty).toFixed(2)}`;
                    updateCartTotal();
                } else {
                    alert(data.message || "Could not update quantity.");
                }
            });
        }

        function removeFromCart(stockId) {
            if (confirm("Are you sure you want to remove this item from your cart?")) {
                fetch('/Order/RemoveFromCart', {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ stockId: stockId })
                })
                .then(response => response.json())
                .then(data => {
                    alert(data.message || "Item removed.");
                    location.reload();
                });
            }
        }

        function placeOrder() {
            if (confirm("Are you sure you want to place the order?")) {
                fetch('/Order/PlaceOrder', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(response => response.json())
                .then(data => {
                    alert(data.message || "Order placed successfully.");
                    location.reload();
                });
            }
        }

        function updateCartTotal() {
            let totalElements = document.querySelectorAll(".total-price");
            let cartTotal = 0;
            totalElements.forEach(el => {
                cartTotal += parseFloat(el.innerText.replace("$", ""));
            });
            document.getElementById("cart-total").innerText = `$${cartTotal.toFixed(2)}`;
        }

        updateCartTotal();
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
 *@

  @using Inventree_App.Dto
@model List<CartItemDto>
@{
    Layout = "_FacultyLayout";
    ViewData["Title"] = "Shopping Cart";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>myaLphabet</title>
    <link rel="icon" type="image/x-icon" href="/Images/favicon.png">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
        :root {
            --theme-blue: #0d6efd;
            --theme-yellow: #ffc107;
            --light-bg: #f8f9fa;
            --card-shadow: 0 6px 20px rgba(0,0,0,0.09);
            --card-radius: 0.75rem;
        }

        body {
            background-color: var(--light-bg);
        }

        .cart-container {
            background-color: #ffffff;
            border-radius: var(--card-radius);
            box-shadow: var(--card-shadow);
            border: none;
        }

        .cart-header {
            color: var(--theme-blue);
            font-weight: 700;
        }

        .table thead {
            background-color: var(--theme-blue);
            color: white;
            vertical-align: middle;
        }

        .quantity-control .btn {
            border-radius: 50%;
            width: 32px;
            height: 32px;
            line-height: 1;
            padding: 0;
            font-weight: bold;
        }

        .quantity-display {
            min-width: 40px;
            font-weight: 500;
        }
    </style>
</head>
<body>
    <div class="container my-5">
        <div class="cart-container p-4 p-md-5">
            <h2 class="cart-header text-center mb-4" style="color: #004085;">
                <i class="bi bi-cart3 me-2"></i>Shopping Cart
            </h2>>

            @if (Model == null || Model.Count == 0)
            {
                <div class="text-center py-5">
                    <i class="bi bi-cart-x fs-1 text-muted"></i>
                    <h4 class="mt-3">Your cart is empty.</h4>
                    <p class="text-muted">Looks like you haven't added anything to your cart yet.</p>
                    <a href="@Url.Action("Index", "Order")" class="btn btn-primary mt-3">
                        <i class="bi bi-arrow-left me-1"></i> Continue Shopping
                    </a>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table align-middle">
                        <thead>
                            <tr>
                                <th class="ps-3">Product</th>
                                <th class="text-center">Quantity</th>
                                <th class="text-center">Unit Type</th>
                                <th class="text-center">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td class="ps-3 fw-semibold">
                                        @item.StockName
                                    </td>
                                    <td>
                                        <div class="d-flex justify-content-center align-items-center quantity-control">
                                            <button class="btn btn-outline-primary btn-sm" onclick="updateQuantity('@item.StockId', -1)">
                                                <i class="bi bi-dash-lg"></i>
                                            </button>
                                            <span id="qty-@item.StockId" class="mx-3 quantity-display text-center">@item.Quantity</span>
                                            <button class="btn btn-primary btn-sm" onclick="updateQuantity('@item.StockId', 1)">
                                                <i class="bi bi-plus-lg"></i>
                                            </button>
                                        </div>
                                    </td>
                                    <td class="text-center">
                                        <span class="badge bg-secondary">@item.Units</span>
                                    </td>
                                    <td class="text-center">
                                        <button class="btn btn-danger btn-sm" onclick="removeFromCart('@item.StockId')">
                                            <i class="bi bi-trash3-fill"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-end mt-4">
                    <button class="btn btn-success btn-lg fw-semibold" onclick="placeOrder()">
                        Place Order <i class="bi bi-send-check-fill ms-1"></i>
                    </button>
                </div>
            }
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function updateQuantity(stockId, change) {
            let qtyElement = document.getElementById(`qty-${stockId}`);
            let currentQty = parseInt(qtyElement.innerText);
            let newQty = currentQty + change;

            if (newQty < 1) {
                // Prevent quantity from going below 1
                return;
            }

            // CORRECTED: Using your original endpoint "/Order/AddToCart"
            // This logic effectively "re-adds" the item with the new quantity.
            fetch("/Order/AddToCart", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ stockId: stockId, quantity: newQty })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    qtyElement.innerText = newQty;
                } else {
                    alert(data.message || "Could not update quantity.");
                    // If the update fails, revert the quantity on the screen
                    qtyElement.innerText = currentQty;
                }
            })
            .catch(error => {
                console.error("Error updating quantity:", error);
                alert("An error occurred. Please try again.");
            });
        }

        function removeFromCart(stockId) {
            if (confirm("Are you sure you want to remove this item from your cart?")) {
                // CORRECTED: Using your original DELETE method
                fetch('/Order/RemoveFromCart', {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ stockId: stockId })
                })
                .then(response => response.json())
                .then(data => {
                    alert(data.message || "Item removed.");
                    location.reload();
                })
                .catch(error => {
                    console.error("Error removing item:", error);
                    alert("An error occurred. Please try again.");
                });
            }
        }

        function placeOrder() {
            if (confirm("Are you sure you want to place the order?")) {
                fetch('/Order/PlaceOrder', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(response => response.json())
                .then(data => {
                    alert(data.message || "Order placed successfully.");
                    location.reload();
                })
                .catch(error => {
                    console.error("Error placing order:", error);
                    alert("An error occurred. Please try again.");
                });
            }
        }
    </script>
</body>
</html>