@model List<Inventree_App.Models.CartItem>
@{
    Layout = "_FacultyLayout";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f8f9fa;
            padding: 20px;
        }

        .container-cart {
            margin-top: 30px;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        }

        .quantity-container {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .quantity-btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            font-size: 16px;
            border-radius: 5px;
            margin: 0 5px;
        }

            .quantity-btn:hover {
                background: #0056b3;
            }

        .loader {
            display: none;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: auto;
        }

        @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }
    </style>
</head>
<body>
    <div class="container container-cart">
        <h2 class="text-center mb-4">Your Cart</h2>

        @if (Model == null || !Model.Any())
        {
            <p class="text-center">Your cart is empty.</p>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped text-center">
                    <thead class="table-dark">
                        <tr>
                            <th>Stock Name</th>
                            <th>Quantity</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.StockName</td>
                                <td class="quantity-container">
                                    <button class="quantity-btn btn-sm" onclick="updateQuantity('@item.StockId', -1)">-</button>
                                    <span id="qty-@item.StockId">@item.Quantity</span>
                                    <button class="quantity-btn btn-sm" onclick="updateQuantity('@item.StockId', 1)">+</button>
                                </td>
                                <td>
                                    <button class="btn btn-danger btn-sm" onclick="removeFromCart(@item.StockId)">
                                        Remove
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="text-center mt-3">
                <button class="btn btn-success px-4" onclick="placeOrder()">Place Order</button>
            </div>
        }

        <div class="loader" id="loader"></div>
    </div>

    <script>
        function updateQuantity(stockId, change) {
            let qtyElement = document.getElementById(`qty-${stockId}`);
            let currentQty = parseInt(qtyElement.innerText);
            let newQty = currentQty + change;

            if (newQty < 1) {
                alert("Invalid! Quantity cannot be less than 1.");
                return;
            }
            fetch("/Order/AddToCart", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ stockId: stockId, quantity: parseInt(newQty) })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    qtyElement.innerText = newQty;
                } else {
                    alert(data.message || "Could not update quantity.");
                }
            });
        }

        function removeFromCart(stockId) {
            if (confirm("Are you sure you want to remove this item from your cart?")) {
                fetch('/Order/RemoveFromCart', {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ stockId: stockId })
                })
                .then(response => response.json())
                .then(data => {
                    alert(data.message || "Item removed.");
                    location.reload();
                });
            }
        }

        function placeOrder() {
            if (confirm("Are you sure you want to place the order?")) {
                fetch('/Order/PlaceOrder', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(response => response.json())
                .then(data => {
                    alert(data.message || "Order placed successfully.");
                    location.reload();
                });
            }
        }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
