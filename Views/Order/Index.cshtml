@{
    Layout = "_FacultyLayout";
}
@model List<Inventree_App.Models.StockViewModel>

@* @{
    ViewData["Title"] = "Inventory";
    int currentPage = Context.Request.Query.ContainsKey("page") ? int.Parse(Context.Request.Query["page"]) : 1;
    int totalPages = ViewBag.TotalPages ?? 1;

} *@
@{
    ViewData["Title"] = "Inventory Overview";
    int currentPage = ViewBag.CurrentPage ?? 1;
    int totalPages = ViewBag.TotalPages ?? 1;
    int totalItem = ViewBag.TotalItems ?? 0;
    int pageSize = ViewBag.PageSize ?? 10;
    string currentFilter = ViewBag.CurrentFilter ?? "all";
    string currentSearch = ViewBag.CurrentSearch ?? "";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>aLphabet-Connect</title>
    <link rel="icon" type="image/x-icon" href="/Images/favicon.png">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>
<div class="container mt-5 px-4">
    <h2 class="mb-4 fw-bold">Inventory Stocks</h2>
        <!-- Search and Filter -->
        <div class="row gy-2 gx-3 align-items-center mb-4 justify-content-start">
            <div class="col-auto">
                <input type="text" id="searchBox" class="form-control form-control-sm shadow-sm" placeholder="Search Product..." style="max-width: 220px;">
            </div>
            <div class="col-auto">
                <select class="form-select form-select-sm shadow-sm" id="locationFilter" style="max-width: 180px;">
                    <option value="">Select a Category</option>
                    @foreach (var location in ViewData["Locations"] as SelectList)
                    {
                        <option value="@location.Value">@location.Text</option>
                    }
                </select>
            </div>
            <div class="col-auto">
                <button class="btn btn-sm btn-outline-primary shadow-sm px-4" onclick="applyFilters()">Apply</button>
            </div>
        </div>


    <!-- Product Table -->
    <div class="table-responsive shadow-sm">
        <table class="table table-hover align-middle table-striped border rounded overflow-hidden">
            <thead class="table-primary">
                <tr>
                    <th>ID</th>
                    <th>Stock Name</th>
                    <th>Stock Quantity</th>
                    <th>Stock Category</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="productTableBody">
                @if (!Model.Any())
                {
                    <tr>
                        <td colspan="5" class="text-center text-muted py-4">
                            <i class="bi bi-info-circle-fill me-2"></i>No records found.
                        </td>
                    </tr>
                }
                else
                {
                    foreach (var product in Model)
                    {
                        <tr>
                            <td>@product.ID</td>
                            <td class="fw-semibold">@product.Name</td>
                            <td>

                                @if (product.StockQuantity == 0)
                                {
                                    <span class="badge bg-danger">Out of Stock</span>
                                }
                                else
                                {
                                    <span class="badge bg-success">@product.StockQuantity</span>
                                }
                            </td>
                            <td>@product.StockLocation</td>
                            <td>
                                <button class="btn btn-sm btn-outline-success add-to-cart"
                                        data-id="@product.ID"
                                @(product.StockQuantity == 0 ? "disabled" : "")>
                                    <i class="bi bi-cart-plus"></i> Add to Cart
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

        @* Pagination (only if there's data and more than 1 page) *@
        @if (Model.Any() && totalPages > 1)
        {
            var querySearch = Context.Request.Query["search"];
            var queryLocation = Context.Request.Query["locationId"];
            var queryFilter = Context.Request.Query["filter"];

            <div class="d-flex justify-content-center mt-4">
                <nav>
                    <ul class="pagination pagination-sm">
                        @* Previous page *@
                        @if (currentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { page = currentPage - 1, search = querySearch, locationId = queryLocation, filter = queryFilter })">&laquo;</a>
                            </li>
                        }

                        @* First page *@
                        <li class="page-item @(currentPage == 1 ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = 1, search = querySearch, locationId = queryLocation, filter = queryFilter })">1</a>
                        </li>

                        @* Left ellipsis *@
                        @if (currentPage > 3)
                        {
                            <li class="page-item disabled"><span class="page-link">...</span></li>
                        }

                        @* Page range around current *@
                        @for (int i = Math.Max(2, currentPage - 1); i <= Math.Min(totalPages - 1, currentPage + 1); i++)
                        {
                            <li class="page-item @(currentPage == i ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { page = i, search = querySearch, locationId = queryLocation, filter = queryFilter })">@i</a>
                            </li>
                        }

                        @* Right ellipsis *@
                        @if (currentPage < totalPages - 2)
                        {
                            <li class="page-item disabled"><span class="page-link">...</span></li>
                        }

                        @* Last page *@
                        <li class="page-item @(currentPage == totalPages ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = totalPages, search = querySearch, locationId = queryLocation, filter = queryFilter })">@totalPages</a>
                        </li>

                        @* Next page *@
                        @if (currentPage < totalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { page = currentPage + 1, search = querySearch, locationId = queryLocation, filter = queryFilter })">&raquo;</a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        }

</div>

<!-- Toast Notification -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1055;">
    <div id="toastSuccess" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                Item added to cart successfully!
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    </div>
</div>
</body>
</html>
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll(".add-to-cart").forEach(button => {
                button.addEventListener("click", function () {
                    let stockId = this.getAttribute("data-id");
                    let quantity = 1;

                    fetch("/Order/AddToCart", {
                        method: 'POST',
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ stockId: stockId, quantity: quantity })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const toast = new bootstrap.Toast(document.getElementById("toastSuccess"));
                                toast.show();
                            } else {
                                alert("Failed to add item.");
                            }
                        });
                });
            });
        });

        function applyFilters() {
            let search = document.getElementById("searchBox").value;
            let location = document.getElementById("locationFilter").value;
            window.location.href = `?search=${search}&locationId=${location}`;
        }
    </script>
}
<style>
    .container
    {
       max-width :100%;
    }
</style>