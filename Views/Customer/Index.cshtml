@model List<Inventree_App.Models.Customer>

@{
    ViewData["Title"] = "Customer List";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>myaLphabet</title>
    <link rel="icon" href="/Images/favicon.png" type="image/x-icon" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <style>
        .profile-img {
            width: 40px;
            height: 40px;
            object-fit: cover;
            border-radius: 50%;
        }

        input[type="file"] {
            display: none;
        }

        .image-wrapper {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .upload-label {
            cursor: pointer;
        }

        .upload-preview {
            display: flex;
            flex-direction: column;
        }
    </style>
</head>
<body>
    <div class="container-fluid p-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="fw-bold mb-0" style="color: #004085;">Customer Management</h2>
            <a class="btn btn-primary" href="@Url.Action("Register", "Home")">
                <i class="fas fa-plus me-2"></i>Add New Customer
            </a>
        </div>

        <div class="card shadow-sm border-0 mb-4">
            <div class="card-body">
                <input type="text" id="searchInput" class="form-control w-50" placeholder="Search customers by name, email, or role..." />
            </div>
        </div>

        <div class="table-container">
            <div class="table-responsive">
                <table class="table table-striped table-hover align-middle mb-0" id="customerTable">
                    <thead>
                        <tr>
                            <th>Image</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>First Name</th>
                            <th>Last Name</th>
                            <th>Created On</th>
                            <th>Roles</th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var customer in Model)
                        {
                            var imageUrl = string.IsNullOrEmpty(customer.Image) ? "/Images/broken-profile.png" : customer.Image;

                            <tr data-id="@customer.Id">
                                <td data-label="Image">
                                    <div class="upload-preview">
                                        <img src="@imageUrl"
                                             onerror="this.onerror=null;this.src='/Images/broken-profile.png';"
                                             class="profile-img preview-img" alt="Profile" />
                                        <label class="upload-label text-primary small d-none">
                                            <i class="fas fa-upload"></i> Change
                                            <input type="file" accept="image/*" class="image-input" />
                                        </label>
                                    </div>
                                </td>
                                <td data-label="Name" class="editable fw-semibold" data-field="UserName">@customer.UserName</td>
                                <td data-label="Email">@customer.Email</td>
                                <td data-label="First Name" class="editable" data-field="FirstName">@customer.FirstName</td>
                                <td data-label="Last Name" class="editable" data-field="LastName">@customer.LastName</td>
                                <td data-label="Created On">@customer.CreatedOn.ToString()</td>
                                <td data-label="Roles"><span class="badge bg-secondary">@customer.UserRoles</span></td>
                                <td data-label="Actions" class="actions-cell">
                                    <div class="d-flex justify-content-center gap-2">
                                        <button class="edit-btn btn btn-sm btn-outline-primary" data-bs-toggle="tooltip" title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="save-btn btn btn-sm btn-success d-none" data-bs-toggle="tooltip" title="Save">
                                            <i class="fas fa-save"></i>
                                        </button>
                                        <a href="@Url.Action("DeleteConfirmed", "Customer", new { id = customer.Id })"
                                           class="btn btn-sm btn-outline-danger delete-btn"
                                           onclick="return confirm('Are you sure you want to delete this customer?');"
                                           data-bs-toggle="tooltip" title="Delete">
                                            <i class="fas fa-trash-alt"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

            // Enable Bootstrap tooltips
            const tooltipList = [...document.querySelectorAll('[data-bs-toggle="tooltip"]')]
                .map(el => new bootstrap.Tooltip(el));

            // Search functionality
            const searchInput = document.getElementById('searchInput');
            const rows = document.querySelectorAll("#customerTable tbody tr");

            searchInput?.addEventListener("input", function () {
                const val = this.value.toLowerCase();
                rows.forEach(row => {
                    const text = row.innerText.toLowerCase();
                    row.style.display = text.includes(val) ? "" : "none";
                });
            });

            // Edit button
            document.querySelectorAll(".edit-btn").forEach(button => {
                button.addEventListener("click", function () {
                    const row = this.closest("tr");

                    row.querySelectorAll(".editable").forEach(cell => {
                        const value = cell.innerText.trim();
                        cell.innerHTML = `<input type="text" class="form-control form-control-sm" value="${value}" />`;
                    });

                    row.querySelector(".upload-label")?.classList.remove("d-none");
                    this.classList.add("d-none");
                    row.querySelector(".save-btn").classList.remove("d-none");
                });
            });

            // Save button
            document.querySelectorAll(".save-btn").forEach(button => {
                button.addEventListener("click", function () {
                    const row = this.closest("tr");
                    const id = row.getAttribute("data-id");
                    const formData = new FormData();

                    // Add anti-forgery token
                    if (token) {
                        formData.append("__RequestVerificationToken", token);
                    }

                    // Collect editable fields
                    row.querySelectorAll(".editable").forEach(cell => {
                        const field = cell.getAttribute("data-field");
                        const input = cell.querySelector("input");
                        if (field && input) {
                            formData.append(`customer.${field}`, input.value);
                        }
                    });

                    formData.append("customer.Id", id);

                    // Add image file if selected
                    const imageInput = row.querySelector(".image-input");
                    if (imageInput && imageInput.files.length > 0) {
                        formData.append("imageFile", imageInput.files[0]);
                    }

                    // Send full form to backend
                    fetch(`/Customer/Edit/${id}`, {
                        method: "POST",
                        body: formData
                    })
                        .then(res => {
                            if (res.redirected) {
                                window.location.href = res.url; // redirect handled
                            } else if (res.ok) {
                                alert("Customer updated successfully!");
                                window.location.reload();
                            } else {
                                console.error("Update failed.");
                            }
                        })
                        .catch(err => console.error("Error:", err));

                    // Reset UI
                    this.classList.add("d-none");
                    row.querySelector(".edit-btn").classList.remove("d-none");
                    row.querySelector(".upload-label")?.classList.add("d-none");
                });
            });

            // Live image preview
            document.querySelectorAll(".image-input").forEach(input => {
                input.addEventListener("change", function () {
                    const file = this.files[0];
                    const img = this.closest("td").querySelector("img.preview-img");

                    if (file && img) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            img.src = e.target.result;
                        };
                        reader.readAsDataURL(file);
                    }
                });
            });
        });
    </script>

</body>
</html>
